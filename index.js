require('dotenv').config();

const { Client, GatewayIntentBits, Collection } = require('discord.js');
const config = require('./src/config/config');
const { loadCommands } = require('./src/handlers/commandHandler');
const EconomyDatabase = require('./src/database/economy');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates
  ]
});

// G√°n config v√†o client
client.config = config;

// Collections
client.commands = new Collection();
client.cooldowns = new Collection();

// Load commands
try {
  loadCommands(client);
  console.log('‚úÖ Commands loaded successfully');
} catch (error) {
  console.error('‚ùå Error loading commands:', error);
  process.exit(1);
}

// Event handlers
client.once('ready', () => {
  console.log(`‚úÖ Bot ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p v·ªõi t√™n: ${client.user.tag}`);
  console.log(`üìä ƒêang ph·ª•c v·ª• ${client.guilds.cache.size} servers`);
  console.log(`üë• ƒêang ph·ª•c v·ª• ${client.users.cache.size} users`);
});

// X·ª≠ l√Ω l·ªói k·∫øt n·ªëi
client.on('error', error => {
  console.error('‚ùå Discord client error:', error);
});

client.on('warn', warning => {
  console.warn('‚ö†Ô∏è Discord client warning:', warning);
});

// X·ª≠ l√Ω slash commands
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const command = client.commands.get(interaction.commandName);
  if (!command) return;

  try {
    await command.execute(interaction);
  } catch (error) {
    console.error('‚ùå L·ªói khi th·ª±c thi l·ªánh:', error);
    const reply = {
      content: 'C√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh!',
      ephemeral: true
    };
    
    if (interaction.replied || interaction.deferred) {
      await interaction.followUp(reply);
    } else {
      await interaction.reply(reply);
    }
  }
});

// X·ª≠ l√Ω EXP system
client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  // X·ª≠ l√Ω EXP cho tin nh·∫Øn th∆∞·ªùng
  if (!message.content.startsWith(config.prefix)) {
    try {
      const levelUpResult = EconomyDatabase.addMessageExp(message.author.id);
      
      // FIX: Ki·ªÉm tra message t·ªìn t·∫°i v√† kh√¥ng r·ªóng tr∆∞·ªõc khi g·ª≠i
      if (levelUpResult && levelUpResult.message && levelUpResult.message.trim() !== '') {
        await message.channel.send(levelUpResult.message);
      }
    } catch (error) {
      console.error('Error adding message EXP:', error);
    }
    return;
  }

  // X·ª≠ l√Ω prefix commands
  const args = message.content.slice(config.prefix.length).trim().split(/ +/);
  const commandName = args.shift().toLowerCase();
  
  const command = client.commands.get(commandName) || 
                  client.commands.find(cmd => cmd.data && cmd.data.aliases && cmd.data.aliases.includes(commandName));
  
  if (!command) return;

  // X·ª≠ l√Ω cooldown
  if (command.data.cooldown) {
    const { cooldowns } = client;
    
    if (!cooldowns.has(command.data.name)) {
      cooldowns.set(command.data.name, new Collection());
    }
    
    const now = Date.now();
    const timestamps = cooldowns.get(command.data.name);
    const cooldownAmount = command.data.cooldown * 1000;

    if (timestamps.has(message.author.id)) {
      const expirationTime = timestamps.get(message.author.id) + cooldownAmount;
      if (now < expirationTime) {
        const timeLeft = (expirationTime - now) / 1000;
        return message.reply(`‚è∞ Vui l√≤ng ƒë·ª£i th√™m **${timeLeft.toFixed(1)}** gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh \`${command.data.name}\` l·∫ßn n·ªØa.`);
      }
    }
    
    timestamps.set(message.author.id, now);
    setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);
  }

  try {
    await command.execute(message, args);
  } catch (error) {
    console.error(`‚ùå Error executing ${commandName}:`, error);
    message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh!').catch(console.error);
  }
});

// X·ª≠ l√Ω voice state changes ƒë·ªÉ c·ªông EXP
client.on('voiceStateUpdate', async (oldState, newState) => {
  try {
    // Ng∆∞·ªùi d√πng tham gia voice channel v√† kh√¥ng ph·∫£i bot
    if (!oldState.channel && newState.channel && !newState.member.user.bot) {
      const levelUpResult = EconomyDatabase.addVoiceExp(newState.id);
      
      // FIX: Ki·ªÉm tra message t·ªìn t·∫°i v√† kh√¥ng r·ªóng tr∆∞·ªõc khi g·ª≠i
      if (levelUpResult && levelUpResult.message && levelUpResult.message.trim() !== '') {
        // T√¨m text channel ƒë·ªÉ g·ª≠i th√¥ng b√°o
        const textChannel = newState.guild.channels.cache.find(
          channel => channel.type === 0 && channel.name.includes('general')
        ) || newState.guild.systemChannel;

        if (textChannel) {
          await textChannel.send(levelUpResult.message);
        }
      }
    }
  } catch (error) {
    console.error('Error adding voice EXP:', error);
  }
});

// Error handling
process.on('unhandledRejection', error => {
  console.error('‚ùå Unhandled promise rejection:', error);
});

process.on('uncaughtException', error => {
  console.error('‚ùå Uncaught exception:', error);
  process.exit(1);
});

// ƒêƒÉng nh·∫≠p v√†o bot
console.log('üîÑ ƒêang k·∫øt n·ªëi v·ªõi Discord...');
client.login(config.token).catch(error => {
  console.error('‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:', error);
  console.error('üí° Ki·ªÉm tra l·∫°i DISCORD_TOKEN trong file .env');
  process.exit(1);
});
