const { EmbedBuilder } = require('discord.js');
const EconomyDatabase = require('../../database/economy'); // ƒê√£ s·ª≠a

const deck = [
  '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'
];

function getCardValue(card) {
  if (card === 'A') return 1;
  if (['J', 'Q', 'K'].includes(card)) return 10;
  return parseInt(card);
}

function calculateScore(hand) {
  const totalScore = hand.reduce((total, card) => total + getCardValue(card), 0);
  return totalScore % 10;
}

module.exports = {
  data: {
    name: 'baicao',
    description: 'Ch∆°i tr√≤ ch∆°i B√†i C√†o',
    usage: 'baicao <c∆∞·ª£c> ho·∫∑c bc <c∆∞·ª£c>',
    aliases: ['bc'],
    cooldown: 5,
    category: 'fun'
  },
  execute: async (message, args) => {
    const bet = parseInt(args[0]);
    const user = await EconomyDatabase.getUser(message.author.id);

    if (!user) {
      return message.reply('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!');
    }

    if (isNaN(bet) || bet <= 0) {
      return message.reply('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c h·ª£p l·ªá!');
    }

    if (user.money < bet) {
      return message.reply('B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c s·ªë ti·ªÅn n√†y!');
    }

    const playerHand = [
      deck[Math.floor(Math.random() * deck.length)],
      deck[Math.floor(Math.random() * deck.length)],
      deck[Math.floor(Math.random() * deck.length)]
    ];
    
    const dealerHand = [
      deck[Math.floor(Math.random() * deck.length)],
      deck[Math.floor(Math.random() * deck.length)],
      deck[Math.floor(Math.random() * deck.length)]
    ];

    const playerScore = calculateScore(playerHand);
    const dealerScore = calculateScore(dealerHand);

    const embed = new EmbedBuilder()
      .setTitle('üÉè Tr√≤ Ch∆°i B√†i C√†o')
      .addFields(
        { name: 'B√†i c·ªßa b·∫°n:', value: playerHand.join(', ') },
        { name: 'ƒêi·ªÉm c·ªßa b·∫°n:', value: playerScore.toString() },
        { name: 'B√†i c·ªßa nh√† c√°i:', value: dealerHand.join(', ') },
        { name: 'ƒêi·ªÉm c·ªßa nh√† c√°i:', value: dealerScore.toString() }
      )
      .setColor(playerScore > dealerScore ? '#00ff00' : '#ff0000');

    // Ki·ªÉm tra tr∆∞·ªùng h·ª£p th·∫Øng ba c√†o
    if (playerHand.includes('J') && playerHand.includes('Q') && playerHand.includes('K')) {
      embed.addFields({ name: 'üéâ Ch√∫c m·ª´ng!', value: 'B·∫°n ƒë√£ th·∫Øng v·ªõi ba c√†o!' });
      user.money += bet * 2;  // Th∆∞·ªüng g·∫•p ƒë√¥i ti·ªÅn c∆∞·ª£c
    } else if (dealerHand.includes('J') && dealerHand.includes('Q') && dealerHand.includes('K')) {
      embed.addFields({ name: 'üò¢ Th·∫•t b·∫°i!', value: 'Nh√† c√°i ƒë√£ th·∫Øng v·ªõi ba c√†o!' });
      user.money -= bet; // Nh√† c√°i th·∫Øng, ng∆∞·ªùi ch∆°i m·∫•t ti·ªÅn
    } else if (playerScore > dealerScore) {
      embed.addFields({ name: 'üéâ Ch√∫c m·ª´ng!', value: 'B·∫°n ƒë√£ th·∫Øng!' });
      user.money += bet; // Ng∆∞·ªùi ch∆°i th·∫Øng
    } else if (playerScore < dealerScore) {
      embed.addFields({ name: 'üò¢ Th·∫•t b·∫°i!', value: 'B·∫°n ƒë√£ thua!' });
      user.money -= bet; // Ng∆∞·ªùi ch∆°i thua
    } else {
      embed.addFields({ name: 'ü§ù H√≤a!', value: 'C·∫£ hai ƒë·ªÅu c√≥ ƒëi·ªÉm s·ªë gi·ªëng nhau!' });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi ch∆°i trong c∆° s·ªü d·ªØ li·ªáu
    await EconomyDatabase.updateUser(message.author.id, user);

    // G·ª≠i k·∫øt qu·∫£ tr√≤ ch∆°i
    await message.reply({ embeds: [embed] });
  }
};
