const { EmbedBuilder } = require('discord.js');
const EconomyDatabase = require('../../database/economy');
const { onWorkSuccess } = require('./achievements');

function autoResetTasks(user, now, oneDay) {
  if (!user.tasks || !user.tasks.lastReset || now - user.tasks.lastReset >= oneDay) {
    user.tasks = {
      fish: 0,
      hunt: 0,
      work: 0,
      daily: false,
      fishClaimed: false,
      huntClaimed: false,
      workClaimed: false,
      dailyClaimed: false,
      claimed: false,
      lastReset: now
    };
    EconomyDatabase.updateUser(user.id || user.userId, user);
    return true;
  }
  return false;
}

module.exports = {
  data: {
    name: 'work',
    description: 'L√†m vi·ªác ki·∫øm ti·ªÅn m·ªói 30 ph√∫t.',
    usage: 'work',
    cooldown: 1800,
    category: 'economy'
  },
  async execute(message, args) {
    const userId = message.author.id;
    const user = EconomyDatabase.getUser(userId);
    if (!user) {
      return message.reply({
        embeds: [
          new EmbedBuilder()
            .setTitle('L·ªói')
            .setDescription('B·∫°n ch∆∞a c√≥ t√†i kho·∫£n! H√£y chat ho·∫∑c th·ª±c hi·ªán l·ªánh b·∫•t k·ª≥ ƒë·ªÉ t·∫°o t√†i kho·∫£n.')
            .setColor('#FF89A0')
        ]
      });
    }

    // ===== ADD: Daily tasks integration =====
    user.id = userId; // Ensure user has id field
    const now = Date.now();
    const oneDay = 24 * 60 * 60 * 1000;

    // Reset nhi·ªám v·ª• n·∫øu ƒë√£ qua 24h
    autoResetTasks(user, now, oneDay);

    const diff = now - (user.lastWork || 0);

    if (diff < 1800000) {
      const timeLeft = 1800000 - diff;
      const minutes = Math.floor(timeLeft / 60000);
      const seconds = Math.floor((timeLeft % 60000) / 1000);
      return message.reply({
        embeds: [
          new EmbedBuilder()
            .setTitle('‚è∞ B·∫°n v·ª´a l√†m vi·ªác xong')
            .setDescription(`H√£y ƒë·ª£i **${minutes} ph√∫t ${seconds} gi√¢y** ƒë·ªÉ l√†m vi·ªác ti·∫øp.`)
            .setColor('#FF89A0')
        ]
      });
    }

    const coinReward = 800 + Math.floor(Math.random() * 500);
    user.coins += coinReward;
    user.lastWork = now;

    // ===== ADD: Update dailytask progress =====
    user.tasks = user.tasks || {};
    user.tasks.work = (user.tasks.work || 0) + 1;

    EconomyDatabase.updateUser(userId, user);

    // Check achievement
    const newAchievements = onWorkSuccess(userId);

    await message.reply({
      embeds: [
        new EmbedBuilder()
          .setTitle('üíº L√†m vi·ªác th√†nh c√¥ng!')
          .setDescription(`B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${coinReward.toLocaleString()}** ü™ô t·ª´ c√¥ng vi·ªác.`)
          .setColor('#43EA97')
          .setTimestamp()
      ]
    });

    // G·ª≠i embed th√†nh t·ª±u n·∫øu c√≥
    if (newAchievements && newAchievements.length > 0) {
      setTimeout(() => {
        newAchievements.forEach(achievement => {
          const achievementEmbed = new EmbedBuilder()
            .setTitle('üèÜ Th√†nh t·ª±u m·ªõi!')
            .setDescription(`B·∫°n ƒë√£ ho√†n th√†nh: **${achievement.name}**`)
            .addFields(
              { name: 'üéÅ Ph·∫ßn th∆∞·ªüng:', value: `+${achievement.reward.toLocaleString()} coins`, inline: true }
            )
            .setColor('#FFD580')
            .setTimestamp();
          message.channel.send({ embeds: [achievementEmbed] });
        });
      }, 1200);
    }
  }
};