// H√†m t·∫°o thanh progress bar an to√†n
function getStatusBar(current, max, length = 10) {
  // ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† s·ªë v√† kh√¥ng √¢m
  const safeCurrent = Math.max(0, Math.min(current || 0, max || 1));
  const safeMax = Math.max(1, max || 1);
  const safeLength = Math.max(1, length || 10);
  
  const progress = Math.floor((safeCurrent / safeMax) * safeLength);
  const filled = Math.max(0, progress);
  const empty = Math.max(0, safeLength - filled);
  
  return '‚ñ∞'.repeat(filled) + '‚ñ±'.repeat(empty);
}// src/commands/economy/dailytasks.js
const { EmbedBuilder } = require('discord.js');
const EconomyDatabase = require('../../database/economy');

function autoResetTasks(user, now, oneDay) {
  if (!user.tasks.lastReset || now - user.tasks.lastReset >= oneDay) {
    user.tasks = {
      fish: 0,
      hunt: 0,
      work: 0,
      daily: false,
      fishClaimed: false,
      huntClaimed: false,
      workClaimed: false,
      dailyClaimed: false,
      claimed: false,
      lastReset: now
    };
    EconomyDatabase.updateUser(user.id, user);
    return true;
  }
  return false;
}



function buildDailytaskEmbed(user, rewardsMsg, avatarUrl) {
  // ƒê·∫£m b·∫£o user.tasks t·ªìn t·∫°i
  if (!user.tasks) {
    user.tasks = {
      fish: 0,
      hunt: 0,
      work: 0,
      daily: false,
      fishClaimed: false,
      huntClaimed: false,
      workClaimed: false,
      dailyClaimed: false,
      claimed: false,
      lastReset: Date.now()
    };
  }

  // Ti·ªÅn th∆∞·ªüng c·ªë ƒë·ªãnh (n·∫øu b·∫°n mu·ªën random th√¨ ghi ch√∫ ~10-100c)
  const rewardSmall = '10~100';
  const rewardBig = '100~300';

  // T·∫°o progress bar an to√†n v·ªõi block ‚ñ∞
  const fishBar = getStatusBar(user.tasks.fish, 3);
  const huntBar = getStatusBar(user.tasks.hunt, 3);
  const workBar = getStatusBar(user.tasks.work, 3);
  const dailyBar = getStatusBar(user.tasks.daily ? 1 : 0, 1);

  const list = [
    `üé£ **C√¢u c√°:**      \`${user.tasks.fish}/3\` ${fishBar} (Th∆∞·ªüng: ${rewardSmall})`,
    `üèπ **SƒÉn b·∫Øt:**     \`${user.tasks.hunt}/3\` ${huntBar} (Th∆∞·ªüng: ${rewardSmall})`,
    `üíº **L√†m vi·ªác:**   \`${user.tasks.work}/3\` ${workBar} (Th∆∞·ªüng: ${rewardSmall})`,
    `üî• **Nh·∫≠n Daily:** \`${user.tasks.daily ? 1 : 0}/1\` ${dailyBar} (Th∆∞·ªüng: ${rewardSmall})`
  ].join('\n');

  // ƒêi·ªÅu ki·ªán th∆∞·ªüng l·ªõn
  const completedAll =
    user.tasks.fish >= 3 &&
    user.tasks.hunt >= 3 &&
    user.tasks.work >= 3 &&
    user.tasks.daily;

  const claimedAll =
    user.tasks.fishClaimed &&
    user.tasks.huntClaimed &&
    user.tasks.workClaimed &&
    user.tasks.dailyClaimed;

  let bigRewardLine = `üèÜ **Th∆∞·ªüng l·ªõn:** `;
  if (claimedAll && user.tasks.claimed) {
    bigRewardLine += `ƒê√£ nh·∫≠n (${rewardBig})`;
  } else if (completedAll) {
    bigRewardLine += `ƒê·ªß ƒëi·ªÅu ki·ªán nh·∫≠n th∆∞·ªüng l·ªõn! (${rewardBig})`;
  } else {
    bigRewardLine += `Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán (${rewardBig})`;
  }

  return new EmbedBuilder()
    .setTitle('üåü Nhi·ªám V·ª• H√†ng Ng√†y')
    .setColor('#00D187') // Discord Jade Green
    .setDescription([
      list,
      '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ',
      bigRewardLine,
      rewardsMsg ? `\n**üéâ Th∆∞·ªüng v·ª´a nh·∫≠n:**\n${rewardsMsg}` : '',
      '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ',
      '*Nhi·ªám v·ª• s·∫Ω reset m·ªói 24h. S·ª≠ d·ª•ng c√°c l·ªánh economy nh∆∞ `fish`, `hunt`, `work`, `daily` ƒë·ªÉ ho√†n th√†nh nhi·ªám v·ª• v√† nh·∫≠n th∆∞·ªüng!*'
    ].filter(Boolean).join('\n'))
    .setFooter({ text: "Ti·∫øn tr√¨nh ƒë∆∞·ª£c reset m·ªói ng√†y. ƒê·ª´ng qu√™n nh·∫≠n th∆∞·ªüng!" })
    .setTimestamp()
    .setThumbnail(avatarUrl);
}

module.exports = {
  data: {
    name: 'dailytasks',
    description: 'Xem & nh·∫≠n th∆∞·ªüng nhi·ªám v·ª• h√†ng ng√†y',
    cooldown: 3,
    aliases: ['dt', 'task'],
    category: 'economy'
  },
  execute: async (message, args) => {
    try {
      const user = EconomyDatabase.getUser(message.author.id);
      user.id = message.author.id; // c·∫ßn thi·∫øt n·∫øu ch∆∞a c√≥ tr∆∞·ªùng id
      
      // ƒê·∫£m b·∫£o user.tasks t·ªìn t·∫°i
      if (!user.tasks) {
        user.tasks = {
          fish: 0,
          hunt: 0,
          work: 0,
          daily: false,
          fishClaimed: false,
          huntClaimed: false,
          workClaimed: false,
          dailyClaimed: false,
          claimed: false,
          lastReset: Date.now()
        };
      }
      
      const now = Date.now();
      const oneDay = 24 * 60 * 60 * 1000;
      autoResetTasks(user, now, oneDay);

      // ---- Th∆∞·ªüng t·ª´ng nhi·ªám v·ª• nh·ªè ----
      let taskRewardMessages = [];
      
      // fish - Ki·ªÉm tra an to√†n
      if ((user.tasks.fish || 0) >= 3 && !user.tasks.fishClaimed) {
        const reward = Math.floor(Math.random() * 91) + 10; // 10-100
        EconomyDatabase.addMoney(user.id, reward);
        user.tasks.fishClaimed = true;
        taskRewardMessages.push(`üé£ Ho√†n th√†nh **C√¢u c√°**, nh·∫≠n **${reward} coins**`);
      }
      
      // hunt - Ki·ªÉm tra an to√†n
      if ((user.tasks.hunt || 0) >= 3 && !user.tasks.huntClaimed) {
        const reward = Math.floor(Math.random() * 91) + 10; // 10-100
        EconomyDatabase.addMoney(user.id, reward);
        user.tasks.huntClaimed = true;
        taskRewardMessages.push(`üèπ Ho√†n th√†nh **SƒÉn b·∫Øt**, nh·∫≠n **${reward} coins**`);
      }
      
      // work - Ki·ªÉm tra an to√†n
      if ((user.tasks.work || 0) >= 3 && !user.tasks.workClaimed) {
        const reward = Math.floor(Math.random() * 91) + 10; // 10-100
        EconomyDatabase.addMoney(user.id, reward);
        user.tasks.workClaimed = true;
        taskRewardMessages.push(`üíº Ho√†n th√†nh **L√†m vi·ªác**, nh·∫≠n **${reward} coins**`);
      }
      
      // daily - Ki·ªÉm tra an to√†n
      if (user.tasks.daily && !user.tasks.dailyClaimed) {
        const reward = Math.floor(Math.random() * 91) + 10; // 10-100
        EconomyDatabase.addMoney(user.id, reward);
        user.tasks.dailyClaimed = true;
        taskRewardMessages.push(`üî• Nh·∫≠n **Daily**, nh·∫≠n **${reward} coins**`);
      }

      // ---- Th∆∞·ªüng l·ªõn khi ho√†n th√†nh t·∫•t c·∫£ ----
      if (
        (user.tasks.fish || 0) >= 3 &&
        (user.tasks.hunt || 0) >= 3 &&
        (user.tasks.work || 0) >= 3 &&
        user.tasks.daily &&
        !user.tasks.claimed
      ) {
        const totalReward = Math.floor(Math.random() * 201) + 100; // 100-300
        EconomyDatabase.addMoney(user.id, totalReward);
        user.tasks.claimed = true;
        taskRewardMessages.push(`üéÅ **HO√ÄN TH√ÄNH T·∫§T C·∫¢!** Nh·∫≠n **${totalReward} coins**!`);
      }

      // L∆∞u l·∫°i user sau khi nh·∫≠n th∆∞·ªüng
      EconomyDatabase.updateUser(user.id, user);

      // G·ªôp c√°c d√≤ng th∆∞·ªüng v·ª´a nh·∫≠n
      const rewardsMsg = taskRewardMessages.length > 0
        ? taskRewardMessages.map(m=>`‚Ä¢ ${m}`).join('\n')
        : '';

      // Hi·ªÉn th·ªã tr·∫°ng th√°i nhi·ªám v·ª• embed ƒë·∫πp m·∫Øt
      const embed = buildDailytaskEmbed(
        user,
        rewardsMsg,
        message.author.displayAvatarURL({ dynamic: true })
      );

      await message.reply({ embeds: [embed] });
      
    } catch (error) {
      console.error('Error in dailytasks command:', error);
      await message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau!');
    }
  }
};